import streamlit as st
from detection.detect_video import detect_video, detect_frame  # Import th√™m detect_frame
import os
import time
import cv2

base_dir = os.path.dirname(os.path.abspath(__file__))  # ƒê·∫∑t ·ªü ƒë·∫ßu file
timestamp = int(time.time())  # Th√™m d√≤ng n√†y ngay sau base_dir

st.title("üö¶ Nh·∫≠n di·ªán ph∆∞∆°ng ti·ªán sai l√†n ƒë∆∞·ªùng")
uploaded_file = st.file_uploader("Upload video giao th√¥ng", type=["mp4", "avi"])

if uploaded_file is not None:
    save_dir = os.path.normpath(os.path.join(base_dir, "..", "data", "raw_videos"))
    os.makedirs(save_dir, exist_ok=True)
    timestamp = int(time.time())
    input_filename = f"temp_video_{timestamp}.mp4"
    save_path = os.path.join(save_dir, input_filename)
    
    with open(save_path, "wb") as f:
        f.write(uploaded_file.read())
    st.success(f"Video ƒë√£ t·∫£i l√™n: {input_filename}")

    if st.button("Ph√¢n t√≠ch"):
        progress_bar = st.progress(0)
        status_text = st.empty()

        output_dir = os.path.normpath(os.path.join(base_dir, "..", "output", "results"))
        os.makedirs(output_dir, exist_ok=True)
        output_filename = f"out_{timestamp}.mp4"
        output_path = os.path.join(output_dir, output_filename)

        model_path = os.path.normpath(os.path.join(base_dir, "..", "models", "yolo11n.pt"))
        if not os.path.exists(model_path):
            st.error(f"Model kh√¥ng t·ªìn t·∫°i t·∫°i: {model_path}. Vui l√≤ng t·∫£i best.pt t·ª´ Colab.")
        else:
            try:
                def update_progress(percent):
                    progress_bar.progress(int(percent))
                    status_text.text(f"ƒêang ph√¢n t√≠ch... {int(percent)}%")

                detect_video(save_path, model_path=model_path, output=output_path, progress_callback=update_progress)
                progress_bar.progress(100)
                status_text.text("Ph√¢n t√≠ch ho√†n t·∫•t!")

                st.success(f"Ph√¢n t√≠ch ho√†n t·∫•t! B·∫°n c√≥ th·ªÉ xem clip t·∫°i: {output_path}")
                st.video(output_path)
                with open(output_path, "rb") as video_file:
                    st.download_button(
                        label="T·∫£i video k·∫øt qu·∫£",
                        data=video_file,
                        file_name=output_filename,
                        mime="video/mp4"
                    )
            except Exception as e:
                st.error(f"L·ªói khi ph√¢n t√≠ch: {e}")

        if os.path.exists(save_path):
            os.remove(save_path)
            st.success(f"ƒê√£ x√≥a file t·∫°m: {save_path}")

        if not os.path.exists(output_path):
            st.warning("Kh√¥ng t·∫°o ƒë∆∞·ª£c video output.")

st.subheader("Nh·∫≠n di·ªán tr·ª±c ti·∫øp t·ª´ camera (kh√¥ng l∆∞u video)")
if st.button("B·∫Øt ƒë·∫ßu camera"):
    run_camera = st.empty()
    stop_button = st.button("K·∫øt th√∫c")
    cap = cv2.VideoCapture(0)
    model_path = os.path.normpath(os.path.join(base_dir, "..", "models", "yolo11n.pt"))
    if not os.path.exists(model_path):
        st.error(f"Model kh√¥ng t·ªìn t·∫°i t·∫°i: {model_path}. Vui l√≤ng t·∫£i best.pt t·ª´ Colab.")
    else:
        st.info("ƒêang m·ªü camera. Nh·∫•n 'K·∫øt th√∫c' ƒë·ªÉ d·ª´ng.")
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                st.warning("Kh√¥ng l·∫•y ƒë∆∞·ª£c h√¨nh ·∫£nh t·ª´ camera.")
                break
            # Nh·∫≠n di·ªán tr√™n frame
            try:
                frame_detected = detect_frame(frame, model_path=model_path)
            except Exception:
                frame_detected = frame
            run_camera.image(cv2.cvtColor(frame_detected, cv2.COLOR_BGR2RGB), channels="RGB")
            if stop_button:
                break
        cap.release()
        run_camera.empty()
        st.success("ƒê√£ d·ª´ng camera.")